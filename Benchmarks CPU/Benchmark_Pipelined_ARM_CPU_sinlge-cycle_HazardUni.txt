Pipelined_ARM_CPU_sinlge-cycle_HazardUnit

//El siguiente programa prueba todas las instrucciones disponibles en la arquitectura de la CPU diseÃ±ada, el programa deberia dar el resultado correcto 
//solo en el caso de que el programa funcione correctamente, este tipo de testeo se le conoce como ad hoc testing.

//la micro arquitectura de esta CPU tiene 5 etapas de pipelining, pero cuenta con una HazardUnit para eliminar los data-hazards y Control-Hazards, por lo que no deberia
//ser necesario el uso de NOPs.

//es importante destacar que dada la arquitectura de ARM que ese esta utilizando es posible modificar el R15 para generar saltos en el codigo, esto genera problemas con el hazard unit
//por lo que para el caso de querer modificar R15 es necesario utilizar NOPs, para asi combatir el control-hazard de esta instruccion

ADDR        Program                         Comments                            Binary Machine Code                                 HEX Code

00     MAIN SUB R0, R15, R15                ; R0 = 0                            1110 000 0010 0 1111 0000 0000 0000 1111            E04F000F
04          ADD R2, R0, #5                  ; R2 = 5                            1110 001 0100 0 0000 0010 0000 0000 0101            E2802005
08          ADD R3, R0, #12                 ; R3 = 12                           1110 001 0100 0 0000 0011 0000 0000 1100            E280300C
0C          SUB R7, R3, #9                  ; R7 = 3                            1110 001 0010 0 0011 0111 0000 0000 1001            E2437009
10          ORR R4, R7, R2                  ; R4 = 3 OR 5 = 7                   1110 000 1100 0 0111 0100 0000 0000 0010            E1874002
14          AND R5, R3, R4                  ; R5 = 12 AND 7 = 4                 1110 000 0000 0 0011 0101 0000 0000 0100            E0035004
18          ADD R5, R5, R4                  ; R5 = 4 + 7 = 11                   1110 000 0100 0 0101 0101 0000 0000 0100            E0855004
1C          SUBS R8, R5, R7                 ; R8 = 11 - 3 = 8, set Flags        1110 000 0010 1 0101 1000 0000 0000 0111            E0558007
20          BEQ END                         ; shouldn't be taken                0000 101 0000 0 0000 0000 0000 0000 1100            0A00000C
24          SUBS R8, R3, R4                 ; R8 = 12 - 7 = 5                   1110 000 0010 1 0011 1000 0000 0000 0100            E0538004
28          BGE AROUND                      ; should be taken                   1010 101 0000 0 0000 0000 0000 0000 0000            AA000000
2C          ADD R5, R0, #0                  ; should be skipped                 1110 001 0100 0 0000 0101 0000 0000 0000            E2805000
30   AROUND SUBS R8, R7, R2                 ; R8 = 3 - 5 = -2, set Flags        1110 000 0010 1 0111 1000 0000 0000 0010            E0578002
34          ADDLT R7, R5, #1                ; R7 = 11 + 1 = 12                  1011 001 0100 0 0101 0111 0000 0000 0001            B2857001
38          SUB R7, R7, R2                  ; R7 = 12 - 5 = 7                   1110 000 0010 0 0111 0111 0000 0000 0010            E0477002
3C          STR R7, [R3, #84]               ; mem[12+84] = 7                    1110 010 1100 0 0011 0111 0000 0101 0100            E5837054
40          LDR R2, [R0, #96]               ; R2 = mem[96] = 7                  1110 010 1100 1 0000 0010 0000 0110 0000            E5902060
            ADD R9, R2, #0                  ; R9 = R2 = 7                       1110 001 0100 0 0010 1001 0000 0000 0000            E2829000 ---->  Esta instruccion se agrega con el fin de comprobar el correcto
X 44        X ADD R15, R15, R0              ; X PC = PC+8 (skips next)          X 1110 000 0100 0 1111 1111 0000 0000 0000          X E08FF000      funcionamiento del HazarUnit al momento de un control-hazard
44          ADD R15, R15, #16               ; PC = (PC+8)+16 (skip 5 instr.)    1110 001 0100 0 1111 1111 0000 0001 0000            E28FF010        
            NOP                                                                                                                     E2800000
            NOP                                                                                                                     E2800000
            NOP                                                                                                                     E2800000
            NOP                                                                                                                     E2800000
48          ADD R2, R0, #14                 ; shouldn't happen                  1110 001 0100 0 0000 0010 0000 0000 0001            E280200E
4C          B END                           ; always taken                      1110 101 0000 0 0000 0000 0000 0000 0001            EA000001
50          ADD R2, R0, #13                 ; shouldn't happen                  1110 001 0100 0 0000 0010 0000 0000 0001            E280200D
54          ADD R2, R0, #10                 ; shouldn't happen                  1110 001 0100 0 0000 0010 0000 0000 0001            E280200A
58          END STR R2, [R0, #100]          ; mem[100] = 7                      1110 010 1100 0 0000 0010 0000 0101 0100            E5802064

//Numero total de instrucciones: 28
//numero de instrucciones que realizan acciones: 24

//Resultado final esperado: guardar el valor 7 en la direccion de memoria 100